/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <sys/select.h>
#include <unistd.h>
#include <sys/socket.h>
#include <pthread.h>
#include <signal.h>
#include <sys/wait.h>
#include <android/log.h>
#include <sys/types.h>
#include <sys/un.h>
#include <errno.h>
#include <stdlib.h>
/* Header for class com_juns_wechat_processes_Watcher */

#ifndef _Included_com_juns_wechat_processes_Watcher
#define _Included_com_juns_wechat_processes_Watcher
class ProcessBase{
public:
    ProcessBase();
    virtual void do_work(){};
    virtual bool create_child(){ return 0;};
/**
* 捕捉子进程死亡的信号,如果没有子进程此方法可以给一个空实现.
*/
    virtual void catch_child_dead_signal() = 0;

/**
* 在子进程死亡之后做任意事情.
*/
    virtual void on_child_end() = 0;

/**
* 创建父子进程通信通道.
*/
    bool create_channel();

/**
* 给进程设置通信通道.
* @param channel_fd 通道的文件描述
*/
    void set_channel(int channel_fd);

/**
* 向通道中写入数据.
* @param data 写入通道的数据
* @param len  写入的字节数
* @return 实际写入通道的字节数
*/
    int write_to_channel( void* data, int len );

/**
* 从通道中读数据.
* @param data 保存从通道中读入的数据
* @param len  从通道中读入的字节数
* @return 实际读到的字节数
*/
    int read_from_channel( void* data, int len );

/**
* 获取通道对应的文件描述符
*/
    int get_channel() const;

    virtual ~ProcessBase();

protected:

    int m_channel;
};

/**
* 功能：父进程的实现
* @author wangqiang
* @date 2014-03-14
*/
class Parent : public ProcessBase
{
public:

    Parent( JNIEnv* env, jobject jobj );

    virtual bool create_child( );

    virtual void do_work();

    virtual void catch_child_dead_signal();

    virtual void on_child_end();

    virtual ~Parent();

    bool create_channel();

/**
* 获取父进程的JNIEnv
*/
    JNIEnv *get_jni_env() const;

/**
* 获取Java层的对象
*/
    jobject get_jobj() const;

private:

    JNIEnv *m_env;

    jobject m_jobj;

};

/**
* 子进程的实现
* @author wangqiang
* @date 2014-03-14
*/
class Child : public ProcessBase
{
public:

    Child( );

    virtual ~Child();

    virtual void do_work();

    virtual bool create_child();

    virtual void catch_child_dead_signal();

    virtual void on_child_end();

    bool create_channel();

private:

/**
* 处理父进程死亡事件
*/
    void handle_parent_die();

/**
* 侦听父进程发送的消息
*/
    void listen_msg();

/**
* 重新启动父进程.
*/
    void restart_parent();

/**
* 处理来自父进程的消息
*/
    void handle_msg( const char* msg );

/**
* 线程函数，用来检测父进程是否挂掉
*/
    void* parent_monitor();

    void start_parent_monitor();

/**
* 这个联合体的作用是帮助将类的成员函数做为线程函数使用
*/
    union
    {
        void* (*thread_rtn)(void*);

        void* (Child::*member_rtn)();
    }RTN_MAP;
};

#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_juns_wechat_processes_Watcher
 * Method:    createWatcher
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_juns_wechat_processes_Watcher_createWatcher
  (JNIEnv *, jobject, jstring);

/*
 * Class:     com_juns_wechat_processes_Watcher
 * Method:    connectToMonitor
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_juns_wechat_processes_Watcher_connectToMonitor
  (JNIEnv *, jobject);

/*
 * Class:     com_juns_wechat_processes_Watcher
 * Method:    sendMsgToMonitor
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_juns_wechat_processes_Watcher_sendMsgToMonitor
  (JNIEnv *, jobject, jstring);




#ifdef __cplusplus
}
#endif
#endif
