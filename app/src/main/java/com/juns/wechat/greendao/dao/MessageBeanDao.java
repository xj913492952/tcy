package com.juns.wechat.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.tongchengyuan.chat.bean.MessageBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_BEAN".
*/
public class MessageBeanDao extends AbstractDao<MessageBean, String> {

    public static final String TABLENAME = "MESSAGE_BEAN";

    /**
     * Properties of entity MessageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PacketId = new Property(0, String.class, "packetId", true, "PACKET_ID");
        public final static Property MyUserId = new Property(1, String.class, "myUserId", false, "MY_USER_ID");
        public final static Property OtherUserId = new Property(2, String.class, "otherUserId", false, "OTHER_USER_ID");
        public final static Property Msg = new Property(3, String.class, "msg", false, "MSG");
        public final static Property Type = new Property(4, int.class, "type", false, "TYPE");
        public final static Property Date = new Property(5, java.util.Date.class, "date", false, "DATE");
        public final static Property Direction = new Property(6, int.class, "direction", false, "DIRECTION");
        public final static Property State = new Property(7, int.class, "state", false, "STATE");
        public final static Property Flag = new Property(8, int.class, "flag", false, "FLAG");
    }


    public MessageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MessageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_BEAN\" (" + //
                "\"PACKET_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: packetId
                "\"MY_USER_ID\" TEXT," + // 1: myUserId
                "\"OTHER_USER_ID\" TEXT," + // 2: otherUserId
                "\"MSG\" TEXT," + // 3: msg
                "\"TYPE\" INTEGER NOT NULL ," + // 4: type
                "\"DATE\" INTEGER," + // 5: date
                "\"DIRECTION\" INTEGER NOT NULL ," + // 6: direction
                "\"STATE\" INTEGER NOT NULL ," + // 7: state
                "\"FLAG\" INTEGER NOT NULL );"); // 8: flag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageBean entity) {
        stmt.clearBindings();
 
        String packetId = entity.getPacketId();
        if (packetId != null) {
            stmt.bindString(1, packetId);
        }
 
        String myUserId = entity.getMyUserId();
        if (myUserId != null) {
            stmt.bindString(2, myUserId);
        }
 
        String otherUserId = entity.getOtherUserId();
        if (otherUserId != null) {
            stmt.bindString(3, otherUserId);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(4, msg);
        }
        stmt.bindLong(5, entity.getType());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(6, date.getTime());
        }
        stmt.bindLong(7, entity.getDirection());
        stmt.bindLong(8, entity.getState());
        stmt.bindLong(9, entity.getFlag());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageBean entity) {
        stmt.clearBindings();
 
        String packetId = entity.getPacketId();
        if (packetId != null) {
            stmt.bindString(1, packetId);
        }
 
        String myUserId = entity.getMyUserId();
        if (myUserId != null) {
            stmt.bindString(2, myUserId);
        }
 
        String otherUserId = entity.getOtherUserId();
        if (otherUserId != null) {
            stmt.bindString(3, otherUserId);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(4, msg);
        }
        stmt.bindLong(5, entity.getType());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(6, date.getTime());
        }
        stmt.bindLong(7, entity.getDirection());
        stmt.bindLong(8, entity.getState());
        stmt.bindLong(9, entity.getFlag());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MessageBean readEntity(Cursor cursor, int offset) {
        MessageBean entity = new MessageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // packetId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // myUserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // otherUserId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // msg
            cursor.getInt(offset + 4), // type
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // date
            cursor.getInt(offset + 6), // direction
            cursor.getInt(offset + 7), // state
            cursor.getInt(offset + 8) // flag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageBean entity, int offset) {
        entity.setPacketId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMyUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOtherUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMsg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.getInt(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setDirection(cursor.getInt(offset + 6));
        entity.setState(cursor.getInt(offset + 7));
        entity.setFlag(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MessageBean entity, long rowId) {
        return entity.getPacketId();
    }
    
    @Override
    public String getKey(MessageBean entity) {
        if(entity != null) {
            return entity.getPacketId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageBean entity) {
        return entity.getPacketId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
