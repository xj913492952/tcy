package com.juns.wechat.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.tongchengyuan.bean.DynamicBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DYNAMIC_BEAN".
*/
public class DynamicBeanDao extends AbstractDao<DynamicBean, String> {

    public static final String TABLENAME = "DYNAMIC_BEAN";

    /**
     * Properties of entity DynamicBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DynamicId = new Property(0, String.class, "dynamicId", true, "DYNAMIC_ID");
        public final static Property PublisherId = new Property(1, String.class, "publisherId", false, "PUBLISHER_ID");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Images = new Property(3, String.class, "images", false, "IMAGES");
        public final static Property CreateDate = new Property(4, String.class, "createDate", false, "CREATE_DATE");
        public final static Property PublisherName = new Property(5, String.class, "publisherName", false, "PUBLISHER_NAME");
    }


    public DynamicBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DynamicBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DYNAMIC_BEAN\" (" + //
                "\"DYNAMIC_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: dynamicId
                "\"PUBLISHER_ID\" TEXT," + // 1: publisherId
                "\"CONTENT\" TEXT," + // 2: content
                "\"IMAGES\" TEXT," + // 3: images
                "\"CREATE_DATE\" TEXT," + // 4: createDate
                "\"PUBLISHER_NAME\" TEXT);"); // 5: publisherName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DYNAMIC_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DynamicBean entity) {
        stmt.clearBindings();
 
        String dynamicId = entity.getDynamicId();
        if (dynamicId != null) {
            stmt.bindString(1, dynamicId);
        }
 
        String publisherId = entity.getPublisherId();
        if (publisherId != null) {
            stmt.bindString(2, publisherId);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(4, images);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(5, createDate);
        }
 
        String publisherName = entity.getPublisherName();
        if (publisherName != null) {
            stmt.bindString(6, publisherName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DynamicBean entity) {
        stmt.clearBindings();
 
        String dynamicId = entity.getDynamicId();
        if (dynamicId != null) {
            stmt.bindString(1, dynamicId);
        }
 
        String publisherId = entity.getPublisherId();
        if (publisherId != null) {
            stmt.bindString(2, publisherId);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(4, images);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(5, createDate);
        }
 
        String publisherName = entity.getPublisherName();
        if (publisherName != null) {
            stmt.bindString(6, publisherName);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DynamicBean readEntity(Cursor cursor, int offset) {
        DynamicBean entity = new DynamicBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // dynamicId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // publisherId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // images
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // createDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // publisherName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DynamicBean entity, int offset) {
        entity.setDynamicId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPublisherId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImages(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPublisherName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DynamicBean entity, long rowId) {
        return entity.getDynamicId();
    }
    
    @Override
    public String getKey(DynamicBean entity) {
        if(entity != null) {
            return entity.getDynamicId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DynamicBean entity) {
        return entity.getDynamicId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
