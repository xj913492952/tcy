package com.juns.wechat.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.tongchengyuan.bean.FriendBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIEND_BEAN".
*/
public class FriendBeanDao extends AbstractDao<FriendBean, String> {

    public static final String TABLENAME = "FRIEND_BEAN";

    /**
     * Properties of entity FriendBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property OwnerId = new Property(1, String.class, "ownerId", false, "OWNER_ID");
        public final static Property ContactId = new Property(2, String.class, "contactId", false, "CONTACT_ID");
        public final static Property SubType = new Property(3, String.class, "subType", false, "SUB_TYPE");
        public final static Property Remark = new Property(4, String.class, "remark", false, "REMARK");
        public final static Property Flag = new Property(5, int.class, "flag", false, "FLAG");
        public final static Property ModifyDate = new Property(6, long.class, "modifyDate", false, "MODIFY_DATE");
    }


    public FriendBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FriendBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"OWNER_ID\" TEXT," + // 1: ownerId
                "\"CONTACT_ID\" TEXT," + // 2: contactId
                "\"SUB_TYPE\" TEXT," + // 3: subType
                "\"REMARK\" TEXT," + // 4: remark
                "\"FLAG\" INTEGER NOT NULL ," + // 5: flag
                "\"MODIFY_DATE\" INTEGER NOT NULL );"); // 6: modifyDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FriendBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindString(2, ownerId);
        }
 
        String contactId = entity.getContactId();
        if (contactId != null) {
            stmt.bindString(3, contactId);
        }
 
        String subType = entity.getSubType();
        if (subType != null) {
            stmt.bindString(4, subType);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(5, remark);
        }
        stmt.bindLong(6, entity.getFlag());
        stmt.bindLong(7, entity.getModifyDate());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FriendBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindString(2, ownerId);
        }
 
        String contactId = entity.getContactId();
        if (contactId != null) {
            stmt.bindString(3, contactId);
        }
 
        String subType = entity.getSubType();
        if (subType != null) {
            stmt.bindString(4, subType);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(5, remark);
        }
        stmt.bindLong(6, entity.getFlag());
        stmt.bindLong(7, entity.getModifyDate());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FriendBean readEntity(Cursor cursor, int offset) {
        FriendBean entity = new FriendBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ownerId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // contactId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // subType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // remark
            cursor.getInt(offset + 5), // flag
            cursor.getLong(offset + 6) // modifyDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FriendBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOwnerId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContactId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSubType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemark(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFlag(cursor.getInt(offset + 5));
        entity.setModifyDate(cursor.getLong(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FriendBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(FriendBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FriendBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
