package cn.tongchengyuan.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.tongchengyuan.bean.UserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BEAN".
*/
public class UserBeanDao extends AbstractDao<UserBean, String> {

    public static final String TABLENAME = "USER_BEAN";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", true, "USER_ID");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property NickName = new Property(2, String.class, "nickName", false, "NICK_NAME");
        public final static Property PassWord = new Property(3, String.class, "passWord", false, "PASS_WORD");
        public final static Property Telephone = new Property(4, String.class, "telephone", false, "TELEPHONE");
        public final static Property HeadUrl = new Property(5, String.class, "headUrl", false, "HEAD_URL");
        public final static Property Signature = new Property(6, String.class, "signature", false, "SIGNATURE");
        public final static Property Sex = new Property(7, String.class, "sex", false, "SEX");
        public final static Property Location = new Property(8, String.class, "location", false, "LOCATION");
        public final static Property Birthday = new Property(9, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Type = new Property(10, String.class, "type", false, "TYPE");
        public final static Property CreateDate = new Property(11, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property ModifyDate = new Property(12, long.class, "modifyDate", false, "MODIFY_DATE");
    }


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEAN\" (" + //
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: userId
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"NICK_NAME\" TEXT," + // 2: nickName
                "\"PASS_WORD\" TEXT," + // 3: passWord
                "\"TELEPHONE\" TEXT," + // 4: telephone
                "\"HEAD_URL\" TEXT," + // 5: headUrl
                "\"SIGNATURE\" TEXT," + // 6: signature
                "\"SEX\" TEXT," + // 7: sex
                "\"LOCATION\" TEXT," + // 8: location
                "\"BIRTHDAY\" TEXT," + // 9: birthday
                "\"TYPE\" TEXT," + // 10: type
                "\"CREATE_DATE\" INTEGER," + // 11: createDate
                "\"MODIFY_DATE\" INTEGER NOT NULL );"); // 12: modifyDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(4, passWord);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(5, telephone);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(6, headUrl);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(7, signature);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(8, sex);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(9, location);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(10, birthday);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(11, type);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(12, createDate.getTime());
        }
        stmt.bindLong(13, entity.getModifyDate());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(4, passWord);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(5, telephone);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(6, headUrl);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(7, signature);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(8, sex);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(9, location);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(10, birthday);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(11, type);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(12, createDate.getTime());
        }
        stmt.bindLong(13, entity.getModifyDate());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // passWord
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // telephone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // headUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // signature
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sex
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // location
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // birthday
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // type
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // createDate
            cursor.getLong(offset + 12) // modifyDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassWord(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTelephone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHeadUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSignature(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSex(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLocation(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBirthday(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreateDate(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setModifyDate(cursor.getLong(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserBean entity, long rowId) {
        return entity.getUserId();
    }
    
    @Override
    public String getKey(UserBean entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserBean entity) {
        return entity.getUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
